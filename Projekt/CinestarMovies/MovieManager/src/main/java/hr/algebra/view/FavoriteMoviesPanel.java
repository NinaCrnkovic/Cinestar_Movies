/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.FavoriteMovie;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTransferable;
import hr.algebra.model.User;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;

import java.util.ArrayList;

import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author Nina
 */
public class FavoriteMoviesPanel extends javax.swing.JPanel {

    /**
     * Creates new form UploadArticlesPanel
     */
    public FavoriteMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        lbUser = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsFavoriteMovies = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        btnClearFavoriteMovies = new javax.swing.JButton();
        btnSaveFavMovies = new javax.swing.JButton();

        setBackground(new java.awt.Color(23, 21, 23));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lsMovies.setBackground(new java.awt.Color(51, 51, 51));
        lsMovies.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(lsMovies);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/favorite.jpg"))); // NOI18N

        lbUser.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbUser.setForeground(new java.awt.Color(0, 51, 204));
        lbUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbUser.setText("Choose your favorite movie");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Favorite Movies");

        lsFavoriteMovies.setBackground(new java.awt.Color(51, 51, 51));
        lsFavoriteMovies.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(lsFavoriteMovies);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 204));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("All Movies");

        btnClearFavoriteMovies.setBackground(new java.awt.Color(0, 102, 204));
        btnClearFavoriteMovies.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClearFavoriteMovies.setForeground(new java.awt.Color(255, 255, 255));
        btnClearFavoriteMovies.setText("Clear Favorite Movies");
        btnClearFavoriteMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFavoriteMoviesActionPerformed(evt);
            }
        });

        btnSaveFavMovies.setBackground(new java.awt.Color(0, 102, 204));
        btnSaveFavMovies.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSaveFavMovies.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveFavMovies.setText("Save Favorite Movies");
        btnSaveFavMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFavMoviesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClearFavoriteMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSaveFavMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(59, 59, 59)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(719, 719, 719)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(543, 543, 543)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(btnSaveFavMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnClearFavoriteMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(815, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1602, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
        initDragNDrop();
    }//GEN-LAST:event_formComponentShown

    private void btnClearFavoriteMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFavoriteMoviesActionPerformed
        favoriteMovies.clear();
        favoriteMoviesModel.clear();
    }//GEN-LAST:event_btnClearFavoriteMoviesActionPerformed

    private void btnSaveFavMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFavMoviesActionPerformed
        List<FavoriteMovie> favMov = new ArrayList<>();
        for (Movie movie : favoriteMovies) {
            favMov.add(new FavoriteMovie(movie.getId(), user.getId()));

        }
        try {
            favoriteMovieRepository.createManny(favMov);
            MessageUtils.showInformationMessage("Info", "Saved");
        } catch (Exception ex) {
            Logger.getLogger(FavoriteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSaveFavMoviesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearFavoriteMovies;
    private javax.swing.JButton btnSaveFavMovies;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbUser;
    private javax.swing.JList<Movie> lsFavoriteMovies;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel<Movie> moviesModel;
    private DefaultListModel<Movie> favoriteMoviesModel;
    private Repository movieRepository;
    private Repository favoriteMovieRepository;
    private List<Movie> favoriteMovies = new ArrayList<>();
    private List<Movie> allMovies = new ArrayList<>();

    private User user; // new User (1, "pero");

    private void initDragNDrop() {
        lsMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsMovies.setDragEnabled(true);
        lsMovies.setTransferHandler(new ExportHandler());

        lsFavoriteMovies.setDropMode(DropMode.ON);
        lsFavoriteMovies.setTransferHandler(new ImportHandler());

    }

    private void init() {
        try {
            movieRepository = RepositoryFactory.getRepository(RepositoryFactory.RepoType.MOVIE);
            favoriteMovieRepository = RepositoryFactory.getRepository(RepositoryFactory.RepoType.FAVORITE_MOVIE);

            moviesModel = new DefaultListModel<>();
            favoriteMoviesModel = new DefaultListModel<>();
            loadMovieModel();
            loadFavoriteMoviesModel();
            lbUser.setText("Chose your favorite movie " + user.getUsername());
        } catch (Exception ex) {
            Logger.getLogger(FavoriteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    public void setUser(User user) {
        this.user = user;

    }

    private void loadMovieModel() throws Exception {
        allMovies = movieRepository.selectAll();
        moviesModel.clear();
        allMovies.forEach(moviesModel::addElement);
        lsMovies.setModel(moviesModel);
    }

    private void loadDropedMoviesModel() {

        for (Movie movie : favoriteMovies) {
            if (!favoriteMoviesModel.contains(movie)) {
                favoriteMoviesModel.addElement(movie);
            }
        }

        lsFavoriteMovies.setModel(favoriteMoviesModel);
    }

    private void loadFavoriteMoviesModel() throws Exception {
        List<FavoriteMovie> favMovies = getFavMovie();
        List<Movie> movies = new ArrayList<>();
        for (FavoriteMovie fmovie : favMovies) {
            Optional<Movie> movie = movieRepository.select(fmovie.getMovieId());
            if (movie.isPresent()) {
                movies.add(movie.get());

            }

        }

        favoriteMoviesModel.clear();
        movies.forEach(favoriteMoviesModel::addElement);
        lsFavoriteMovies.setModel(favoriteMoviesModel);
    }

    private List<FavoriteMovie> getFavMovie() throws Exception {
        List<FavoriteMovie> favMovies = favoriteMovieRepository.selectAll();
        return favMovies.stream()
                .filter(movie -> movie.getUserId() == user.getId())
                .collect(Collectors.toList());
    }

    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new MovieTransferable(lsMovies.getSelectedValue());
        }

    }

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(MovieTransferable.MOVIE_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            try {
                Movie movie = (Movie) support
                        .getTransferable()
                        .getTransferData(MovieTransferable.MOVIE_FLAVOR);
                if (!favoriteMovies.contains(movie)) { // provjeravamo da li se film već nalazi u listi
                    favoriteMovies.add(movie);
                    loadDropedMoviesModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(FavoriteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FavoriteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }

    }

}
