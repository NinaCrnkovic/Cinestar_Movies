/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.SQLRepository;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieGenre;
import hr.algebra.model.MoviePersonRole;
import hr.algebra.model.Person;

import hr.algebra.parsers.rss.MovieParser;
import hr.algebra.utilities.MessageUtils;
import java.io.File;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Nina
 */
public class FavoriteMoviesPanel extends javax.swing.JPanel {

    /**
     * Creates new form UploadArticlesPanel
     */
    public FavoriteMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        btnUploadMovies = new javax.swing.JButton();
        btnClearDatabase = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(23, 21, 23));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsMovies);

        btnUploadMovies.setBackground(new java.awt.Color(0, 102, 204));
        btnUploadMovies.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUploadMovies.setForeground(new java.awt.Color(255, 255, 255));
        btnUploadMovies.setText("Upload Movies");
        btnUploadMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadMoviesActionPerformed(evt);
            }
        });

        btnClearDatabase.setBackground(new java.awt.Color(0, 102, 204));
        btnClearDatabase.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClearDatabase.setForeground(new java.awt.Color(255, 255, 255));
        btnClearDatabase.setText("Clear Database");
        btnClearDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearDatabaseActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/favorite.jpg"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Favorite Movies");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("All Movies");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClearDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClearDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(283, 283, 283))
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(258, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadMoviesActionPerformed
        try {
            List<Movie> uploadedMovies = MovieParser.parse();
            movieRepository.createManny(uploadedMovies);
            List<Movie> movies = movieRepository.selectAll();

            for (Movie movie : movies) {
                for (Movie uploadMovie : uploadedMovies) {
                    if (movie.getTitle().equals(uploadMovie.getTitle())) {
                        movie.setGenres(uploadMovie.getGenres());
                        movie.setActors(uploadMovie.getActors());
                        movie.setDirectors(uploadMovie.getDirectors());

                    }
                }
            }

            for (Movie movie : movies) {

                for (Person actor : movie.getActors()) {
                    int actorId = personRepository.create(actor);
                    MoviePersonRole moviePersonRole = new MoviePersonRole(movie.getId(), actorId, 1);
                    moviePersonRoleRepository.create(moviePersonRole);
                }
                for (Person director : movie.getDirectors()) {
                    int directorId = personRepository.create(director);
                    MoviePersonRole moviePersonRole = new MoviePersonRole(movie.getId(), directorId, 2);
                    moviePersonRoleRepository.create(moviePersonRole);
                }
                for (Genre genre : movie.getGenres()) {
                    int genreId = genreRepository.create(genre);
                    MovieGenre movieGenre = new MovieGenre(movie.getId(), genreId);
                    movieGenreRepository.create(movieGenre);
                }

            }

            loadModel();

        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload movies");
            System.exit(1);
        }
    }//GEN-LAST:event_btnUploadMoviesActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnClearDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearDatabaseActionPerformed
        sqlRepository.clearDatabase();
        try {
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(FavoriteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
         deleteDirectory(new File(DIR));
    }//GEN-LAST:event_btnClearDatabaseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearDatabase;
    private javax.swing.JButton btnUploadMovies;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables
    private static final String DIR = "assets";
    private DefaultListModel<Movie> moviesModel;
    private Repository movieRepository;
    private Repository genreRepository;
    private Repository personRepository;
    private Repository moviePersonRoleRepository;
    private Repository movieGenreRepository;
    private SQLRepository sqlRepository;

    private void init() {
        try {
            movieRepository = RepositoryFactory.getRepository(RepositoryFactory.RepoType.MOVIE);
            genreRepository = RepositoryFactory.getRepository(RepositoryFactory.RepoType.GENRE);
            personRepository = RepositoryFactory.getRepository(RepositoryFactory.RepoType.PERSON);
            movieGenreRepository = RepositoryFactory.getRepository(RepositoryFactory.RepoType.MOVIE_GENRE);
            moviePersonRoleRepository = RepositoryFactory.getRepository(RepositoryFactory.RepoType.MOVIE_PERSON_ROLE);
            sqlRepository= RepositoryFactory.getSqlRepository(RepositoryFactory.SqlRepoType.DATABASE);

            moviesModel = new DefaultListModel<>();
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(FavoriteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void loadModel() throws Exception {
        List<Movie> movies = movieRepository.selectAll();
        moviesModel.clear();
        movies.forEach(moviesModel::addElement);
        lsMovies.setModel(moviesModel);
    }
    private void deleteDirectory(File file) {
        File[] content = file.listFiles();
        if (content != null) {
            for (File f : content) {
                deleteDirectory(f);
            }
        }
        file.delete();
    }


}
