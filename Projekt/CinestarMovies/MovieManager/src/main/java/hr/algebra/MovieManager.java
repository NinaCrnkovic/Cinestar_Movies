/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.algebra;

import com.formdev.flatlaf.FlatDarkLaf;
import hr.algebra.dal.LoginService;
import hr.algebra.dal.sql.DataSourceSingleton;
import hr.algebra.model.User;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.EditMoviesPanel;
import hr.algebra.view.FavoriteMoviesPanel;
import hr.algebra.view.LoginPanel;
import hr.algebra.view.RegisterPanel;
import hr.algebra.view.UploadMoviesPanel;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import javax.swing.UIManager;

/**
 *
 * @author Nina
 */
public class MovieManager extends javax.swing.JFrame implements LoginService {

    private static final String UPLOAD_MOVIES = "Admmin";
    private static final String EDIT_MOVIES = "Edit movies";
    private static final String LOGIN = "Login";
    private static final String REGISTER = "Register";
    private static final String FAVORITE_MOVIES = "Favorite movies";
      private static final String CREATE_ADMIN = "{ CALL CreateAdminUser }";

    /**
     * Creates new form ArticleManager
     */
    public MovieManager() {
        initComponents();
        init();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAplication = new javax.swing.JMenu();
        menuLogout = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1800, 1200));

        tpContent.setBackground(new java.awt.Color(23, 21, 23));
        tpContent.setMaximumSize(new java.awt.Dimension(1700, 1100));
        tpContent.setMinimumSize(new java.awt.Dimension(1700, 1000));
        tpContent.setName(""); // NOI18N

        menuAplication.setMnemonic('C');
        menuAplication.setText("CineStar");
        menuAplication.setActionCommand("MovieApp");

        menuLogout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuLogout.setText("Logout");
        menuLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLogoutActionPerformed(evt);
            }
        });
        menuAplication.add(menuLogout);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuAplication.add(menuExit);

        jMenuBar1.add(menuAplication);

        menuHelp.setMnemonic('H');
        menuHelp.setText("Help");
        menuHelp.setToolTipText("");

        menuAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuAbout.setText("About");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1788, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1157, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        MessageUtils.showInformationMessage("Info", "CineStar Movie App 1.0");
    }//GEN-LAST:event_menuAboutActionPerformed

    private void menuLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLogoutActionPerformed
        userLoggedOut();
    }//GEN-LAST:event_menuLogoutActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        dispose();
    }//GEN-LAST:event_menuExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenu menuAplication;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuLogout;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables
    private LoginPanel loginPanel;
    private RegisterPanel registerPanel;
    private UploadMoviesPanel uploadMoviesPanel;
    private EditMoviesPanel editMoviesPanel;
    private FavoriteMoviesPanel favoriteMoviesPanel;
    private User logedUser = new User();

    private void configurePanels() {

        loginPanel = new LoginPanel();
        registerPanel = new RegisterPanel();

        loginPanel.addLoginService(this);
        registerPanel.addLoginService(this);

        tpContent.add(LOGIN, loginPanel);
        tpContent.add(REGISTER, registerPanel);

    }

      private void init() {
        configurePanels();
        createAdminUserIfNotExist();
    }
    public void callLoginAndRegisterPanel() {

        tpContent.remove(uploadMoviesPanel);
        tpContent.remove(editMoviesPanel);
        tpContent.remove(favoriteMoviesPanel);

        loginPanel = new LoginPanel();
        registerPanel = new RegisterPanel();

        loginPanel.addLoginService(this);
        registerPanel.addLoginService(this);

        tpContent.add(LOGIN, loginPanel);
        tpContent.add(REGISTER, registerPanel);
    }

    public void callAdminPanel() {
        tpContent.remove(loginPanel);
        tpContent.remove(registerPanel);
        uploadMoviesPanel = new UploadMoviesPanel();
        tpContent.add(UPLOAD_MOVIES, uploadMoviesPanel);
    }

    public void callUserPanel() {
        tpContent.remove(loginPanel);
        tpContent.remove(registerPanel);
        editMoviesPanel = new EditMoviesPanel();
        tpContent.add(EDIT_MOVIES, editMoviesPanel);

        favoriteMoviesPanel = new FavoriteMoviesPanel();
        favoriteMoviesPanel.setUser(logedUser);
        tpContent.add(FAVORITE_MOVIES, favoriteMoviesPanel);
    }

    @Override
    public void userLoginIn(User user) {

        logedUser = user;
        if (user.getAccountTypeId() == 2) {
            callUserPanel();
        } else if (user.getAccountTypeId() == 1) {
            callAdminPanel();
        }

    }

    @Override
    public void userLoggedOut() {
        logedUser = null;
        callLoginAndRegisterPanel();
    }

    @Override
    public void createAdminUserIfNotExist() {
    DataSource dataSource = DataSourceSingleton.getInstance();
    try (Connection con = dataSource.getConnection();
         CallableStatement checkAdminStmt = con.prepareCall("SELECT COUNT(*) FROM [User] WHERE AccountTypeID = 1");
         ResultSet rs = checkAdminStmt.executeQuery()) {

        if (rs.next() && rs.getInt(1) == 0) {
            try (CallableStatement createAdminStmt = con.prepareCall(CREATE_ADMIN)) {
                createAdminStmt.execute();
            }
        }
    } catch (SQLException e) {
        // Log the exception or rethrow it as appropriate
        MessageUtils.showErrorMessage("Error", "Cant create admin");
    }
}

  


}
